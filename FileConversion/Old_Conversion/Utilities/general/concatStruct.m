function newStruct = concatStruct(strA,strB)% newStruct = concatStruct(strA,strB)%    Function to concatenate dissimilar structs. Works in two parts: first%    it adds fields exclusive to either member to the other; second: it runs%    concat() on the resulting structs. %%    Example 1:%%    A = struct with fields 'a','b','c';%    B = struct with fields 'a','d','e';%%    For newStruct = concatStruct(A,B), newStruct would have fields%    'a','b','c','d','e'., and the contents of A and B for those fields in A%    and B which were filled. %%    If B were a cell array, a scalar, or a matrix, newStruct would simply%    be A. % RCS info: $Id$%% jpg 6/5/98if (~isstruct(strA) & ~isstruct(strB)), newStruct = concat(strA,strB); elseif ~isstruct(strA), newStruct = strB;elseif ~isstruct(strB), newStruct = strA;else    afields = fieldnames(strA);  bfields = fieldnames(strB);    blen = length(bfields);   for i = 1:blen    if isempty(strmatch(bfields{i},afields))      eval(['strA(length(strA)).' bfields{i} ' = [];']);    end  end    newAfields = fieldnames(strA);  alen = length(newAfields);    for k = 1:length(strB);    for j = 1:alen      isempty(strmatch(newAfields{j},bfields));      if ~isempty(strmatch(newAfields{j},bfields))	eval(['temp.' newAfields{j} '= getfield(strB(k),newAfields{j});']);      else	eval(['temp.' newAfields{j} '= [];']);      end    end    strA(end+1) = temp;  end  newStruct = strA;end