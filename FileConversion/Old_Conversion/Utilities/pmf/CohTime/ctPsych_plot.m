function ctPsych_plot(fun, fits, data, pdat, tbins, cohs, axs)% function ctPsych_plot(fun, fits, data, pdat, tbins, cohs, axs)%% plots data & fit%% Arguments:%   fun     ... function called by ctPsych_err to generate fits%   fits    ... ML fits of data to given fun%   data, rows are trials, columns are:%       data(1) = coh  (0 .. 99.9%)%       data(2) = time (fractional seconds)%       data(3) = dot dir: left (-1) / right (1)%                   *** IF THIS COLUMN IS GIVEN, PMFS WILL%                           BE RT CHOICE VS SIGNED COH ***%   pdat, rows are trials, columns are:%       pdat(1) = pct or correct (1) / error (0)%       data(2) = (optional) n%   tbins   ... scalar number of bins, or [bin_start bin_end] x bins%   cohs%%   axs ... one or two:%     [ax1]     = PMF vs coh, tbins%     [nan ax2] = PMF vs time, cbins%     [ax1 ax2] = duhif nargin < 3  returnend% time binsif nargin < 5 || isempty(tbins)    tbins = [.1:.2:.7;.3:.2:.9];elseif isscalar(tbins)    tbins = prctile(data(:,2), linspace(0,100,tbins+1));    tbins = [tbins(1:end-1); tbins(2:end)];end    % cohsif nargin < 6 || isempty(cohs)    cohs = nonanunique(data(:,1));     % [0 0.032 0.064 0.128 0.256 0.512 0.999];endif size(data, 2) == 3    % make coh, time signed by dot dir    data(:,1)   = data(:,1).*data(:,3);    cohs        = unique([-cohs cohs]);else    cohs        = setdiff(cohs, 0);end% parse axesif nargin < 7 || isempty(axs)    axs = axes;end% compute pct correct vs coh -OR-%   pct right choices vs signed cohif ~isempty(data)    pcts = nans(length(cohs), size(tbins,2));        for cc = 1:length(cohs)        % select coherence        Lc = data(:,1) == cohs(cc);                for tt = 1:size(tbins,2)                        % select time and coherence            Ltr = Lc & data(:,2)>=tbins(1,tt) & data(:,2)<=tbins(2,tt);            % compute percent correct            if sum(Ltr) == 0                pcts(cc, tt) = nan;            elseif cohs(cc) < 0                pcts(cc, tt) = sum(pdat(Ltr,1)==0)./sum(Ltr).*100;            else                pcts(cc, tt) = sum(pdat(Ltr,1)==1)./sum(Ltr).*100;            end        end    endendco          = {'k' 'r' 'g' 'b' 'm' 'c' 'y' };font_size   = 14;marker_size = 18;line_width  = 1.5;        %%% plot vs coh, binned by time%%if isfinite(axs(1))        axes(axs(1));cla(axs(1),'reset');hold on;    mincc = 0.01;    maxc  = 1; %max(cohs);    if size(data,2) == 3        minc = -1;    else        minc = 0.01; %min(cohs);    end        if ~isempty(fits)                %%%        % show fits        %%%        ts = sum(tbins)./2;        xs = linspace(minc, maxc, 100)';        ds = [abs(xs) ones(size(xs)) sign(xs+0.0001)];        % loop through the time bins        for tt = 1:size(tbins, 2)                        % set the time            ds(:,2) = ts(tt);            % plot            plot(100*xs, 50 + ds(:,3).*(100.*feval(fun, fits, ds(:,1:size(data,2))) - 50), ...                '-', 'Color', co{mod(tt-1,length(co))+1}, 'LineWidth', line_width);        end                lstyle = '.';    else        lstyle = '-';    end    if ~isempty(data)        %%%        % show data        %%%        for tt = 1:size(tbins, 2)            % plot the data            plot(100*cohs, pcts(:,tt), lstyle, ...                'MarkerSize', marker_size, 'Color', co{mod(tt-1,length(co))+1});        end    end    if size(data,2) == 3        plot([0 0], [0 100], 'k--');        axis([100*[minc maxc] 0 100]);        set(gca, 'FontSize', font_size);    else        axis([100*[minc maxc] 45 100]);        set(gca, 'XScale', 'log', 'FontSize', font_size);    end    plot(100*[minc maxc], [50 50], 'k--');    xlabel('Motion strength (% coherence)');    ylabel('Percent correct');end%%% plot vs time, per coh%%if length(axs) > 1 && isfinite(axs(2))        axes(axs(2));cla(axs(2),'reset');hold on;    ucohs  = cohs(cohs>0);    nucohs = length(ucohs);        maxt = 1; %max(cohs);    if size(data,2) == 3        mint = -1;    else        mint = 0.01; %min(cohs);    end    if ~isempty(fits) && ~isempty(cohs)                %%%        % show fits        %%%        xs = linspace(mint, maxt, 100)';        ds = [ones(size(xs)) abs(xs) sign(xs+0.0001)];                for cc = 1:nucohs            % get the fits            ds(:,1) = ucohs(cc);            plot(xs, 50+ds(:,3).*(100.*feval(fun, fits, ds(:,1:size(data,2))) - 50), ...                '-', 'Color', co{cc}, 'LineWidth', line_width);        end        lstyle = '.';    else        lstyle = '-';    end    if ~isempty(data)        %%%        % show data        %%%        ts = sum(tbins)./2;        ucohs = cohs(cohs>=0);        for cc = 1:length(ucohs)            Lc      = abs(cohs) == ucohs(cc);            xax     = (sign(cohs(Lc)+0.0001)*ts)';            yax     = pcts(Lc,:)';            yax     = yax(:);            [xax,I] = sort(xax(:));            % plot the data            plot(xax, yax(I), lstyle, 'MarkerSize', marker_size, ...                'Color', co{cc});        end    end    if size(data,2) == 3        plot([-maxt maxt], [50 50], 'k--');        plot([0 0], [0 100], 'k--');        axis([-maxt maxt 0 100]);    else        plot([mint maxt], [50 50], 'k--');        axis([mint maxt 45 100]);    end    set(gca, 'FontSize', font_size);    xlabel('Viewing time (Seconds)');    ylabel('Percent correct');end