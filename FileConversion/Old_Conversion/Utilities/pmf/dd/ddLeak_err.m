function err_ = ddLeak_err(fits)% function err_ = ddLeak_err(fits)%% This routine returns the maximum-likelihood error from the fit %  of the "ddLeak" model of a psychometric function -- a drift-diffusion%  model with a leaky integrator on a deadline taskglobal Dataps = ddLeak_val(Data(:,1:end-1), fits);% Now calculate the joint probability of obtaining the data set conceived as% a list of Bernoulli trials.  This is just ps for trials = 1 and 1-ps for% trials of 0.%p       = [ps(Data(:,end)==1); 1-ps(Data(:,end)==0)];%p(p==0) = 0.001;%err_    = -sum(log(p));			% minus log likelihood% compute the maximum-likelihood error%% Josh's notes:%  see the Appendix in Watson (1979) "Probability summation over time"%  paper for the best description of how to do this maximum-likelihood%  fit. The basic idea is as follows...%  Compute -1 * the logarithm of the likelihood of obtaining the data given%  the model (the -1 is because we're minimizing, not maximizing; the log%  is so we can add instead of multiply). Likelihood is computed by assuming%  each data point comes from a binomial distribution (each point is%  considered separately because viewing times are not binned and we%  do not want to arbitrarily bin), in which the probability of%  obtaining y "yesses" P(y) in n trials (remember in this case n = 1 %  always) given an model-derived estimate of p, the probability of%  a "yes" on a given trial, is:%   P(y) = n!/(y!(n-y)!) * p^y * (1-p)^(n-y)%  ref: Mendenhall et al, p. 81%% Mike's notes:%  Here we take logs of appropriate numbers. See my nanlog.m%  err = -(nanmean(nanlog(p(corr))) + nanmean(nanlog(1-p(~corr))));%  New 6/11/99  add up the log of the prob.  Any missing terms are%  assigned a probability equal to the minimum.[logp1 n1] = nanlog(ps(Data(:,end)==1));[logp2 n2] = nanlog(1-ps(Data(:,end)==0));minlogp    = nanmin([logp1(:); logp2(:)]);err_       = -(nansum(logp1) + nansum(logp2) + (n1 + n2)*minlogp);