function err_ = quickTs_err(fits, data, alpha, num_as, aT, ...    beta, num_bs, bT, guess, lapse)%function err_ = quickTs_err(fits, data, alpha, num_as, aT, ...%    beta, num_bs, bT, guess, lapse)%% Computes the error of the Time-dependent Quick function %   fit, given the Quick parameters ("fits"), the data,%   handles to time-dependent functions for alpha and beta,%   and (optional) fixed values of guess, lapse rates% Used by fmincon.% See quickTs_val for more information on how alpha_fun and%   beta_fun are used%% Arguments:%   fits  ... the vector of n Quick parameters. %       First  set is "num_alphas" parameters for alpha_fun%       Second set is "num_betas"  parameters for beta_fun%       Next-to-last parameter is guess rate%       Last parameter is lapse rate%   data ... rows are trials, 4 columns are:%       data(1) = coh  (0 .. 99.9%)%       data(2) = time (fraction of total)%       data(3) = dot dir: left (-1) / right (1)%       data(4) = pct or correct (1) / error (0)%       data(5) = (optional) n%% Returns:%	err_ ... the negative of the log likelihood of obtaining the data %					using the given parameters.%if nargin < 10 || isempty(lapse)    lapse = fits(end);    fits  = fits(1:end-1);endif nargin < 9 || isempty(guess)    guess = fits(end);endps = quickTs_val(data(:, 1:3), alpha, fits(1:num_as), aT, ...    beta, fits(num_as+[1:num_bs]), bT, guess, lapse);if size(data, 2) < 5    % Now calculate the joint probability of obtaining the data set conceived as    %   a list of Bernoulli trials.  This is just ps for trials = 1 (correct) and    %   1-ps for trials of 0 (error).    % Note that fmincon searches for minimum, which    %   is why we send the negatve of logL    % Avoid log 0    ps(ps==0) = 0.0001;    ps(ps==1) = 1 - 0.0001;    err_      = -sum(log([ps(data(:,4)==1); 1-ps(data(:,4)==0)]));else    % use 'n' values    % see appendix of Watson's "Probability summation over time" (1978)    % paper for derivation    % avoid log(0)    ps(ps==0) = 0.0001;    ps(ps==1) = 1 - 0.0001;    err_      = -sum(data(:,5).*(data(:,4).*log(ps) + (1-data(:,4)).*log(1-ps)));end