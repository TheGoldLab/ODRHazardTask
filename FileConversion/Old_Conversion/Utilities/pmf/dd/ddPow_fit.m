function [fits_,sems_,preds_,resids_,llik]=ddPow_fit(data)%% ddPow_fit fits a drift-diffusion-with-drift model to psychometric%   data (versus coh and time in a deadline-type task) using%   maximum likelihood maximization under binomial assumptions. It uses%   ddPow_err for error calculation.%%  Usage: function [fits_,sems_,preds_,resids_,llik]=ddPow_fit(data)% 	Input values are:%     data, in 3 columns...%		         data(1) = coh (% coherence, 0 ... 100)%                data(2) = time (seconds)%                data(3) = dot dir (-1 = left; 1 = right)%                data(4) = correct (0 = error; 1 = correct)%% 	Return values are:%		fits  ... see ddPow_val for equations%           fits(1) ... B      (bias)%       	fits(2) ... A      (coh scale)%       	fits(3) ... M      (coh exponent)%       	fits(4) ... N      (time exponent)%       	fits(5) ... lambda ("lapse")%       sems,  Standard errors of the fits. Approximated using the%              numerical HESSIAN returned by fmincon%		llik,  The log likelihood of obtaining the data give the fit%       pred,  A vector of the probability of making a correct choice given%              the fitglobal Data;if nargin < 1 || isempty(data)    return;endData = data;%% do the fit[fits_,f,e,o,l,g,H] = fmincon('ddPow_err', ...    [  0  20      1  1  0   ]', [], [], [], [], ...    [ -1   0.001 -2 -2  0.0 ]', ...    [  1 100      4  4  0.4 ]', [], ...    optimset('LargeScale', 'off', 'Display', 'off', 'Diagnostics', 'off'));% standard errors% The covariance matrix is the negative of the inverse of the % hessian of the natural logarithm of the probability of observing % the data set given the optimal parameters.% For now, use the numerically-estimated HESSIAN returned by fmincon% (which remember is computed from -log likelihood)if nargout > 1        % -H because we used -logL in quick_err    sems_ = sqrt(diag(-((-H)^(-1))));end% return the predicted probability (of a correct response) for each observationif nargout > 2    preds_ = ddPow_val(Data(:,1:end-1), fits_);end% residualsif nargout > 3    resids_ = preds_;    resids_(data(:, 4) == 0) = 1 - preds_(data(:, 4) == 0);    resids_ = (data(:, 4).*2-1) .* sqrt(-2.*log(resids_));end% return log likelihoodif nargout > 4    llik_ = -ddPow_err(fits);end