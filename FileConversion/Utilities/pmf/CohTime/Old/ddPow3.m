function vals_ = ddPow3(fits, data)% function vals_ = ddPow3(fits, data)%% Computes TIME-based DDleak function.%   Assumes DD to a fixed TIME (given as col 2 of data).%   Thus, pct correct is fraction of gaussian above%       0 at TIME.%   Assumes no bias, no leak, FF = 0.3%%   at values in "data":%       data(1)   ... coh (%)%       data(2)   ... time (s)%       data(3)   ... dot dir (-1/1)%%   given parameters in "fits":%       fits(1) ... A      (coh scale)%       fits(2) ... M      (coh exponent)%       fits(3) ... N      (time exponent)% return initial values (init, min, max)if nargin < 1        vals_ = [ ...        20    0.1   80;   ...        1     0.001  6;    ...        1     0.001  6];else        R0 = 10;    S1 = (R0 + fits(1).*data(:,1).^fits(2)).*data(:,2).^fits(3);    S2 = R0.*data(:,2).^fits(3);        mu = S1 - S2;    sd = sqrt(0.3.*(S1+S2));        % compute pct correct from the dvar    vals_ = 1 - normcdf(0,mu,sd);        % Avoid NaN's in normcdf, which happens when s=0 (i.e., time=0)    vals_(isnan(vals_)) = 0.5;     % otherwise is NaN    TINY                = 0.0001;    vals_(vals_<TINY)   = TINY;    % lower bound    vals_(vals_>1-TINY) = 1-TINY;  % upper boundend