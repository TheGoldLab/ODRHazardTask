function [fits_,sems_,stats_,preds_,resids_]=ddLeak_fit(data)% function [fits_,sems_,stats_,preds_,resids_]=ddLeak_fit(data)%% ddLeak_fit fits a drift-diffusion-with-drift model to psychometric%   data (versus coh and time in an interrogation-type task) using%   maximum likelihood maximization. It uses ddLeak_err for error %   calculation.%% 	Input values are:%     data, in 4 columns...%		         data(1) = coh  (% coherence, 0 ... 99.9)%                data(2) = time (seconds)%                data(3) = dot dir (-1 = left; 1 = right)%                data(4) = correct (0 = error; 1 = correct)%% 	Return values are:%		fits_   ... see ddLeak_val%       sems_   ...  Standard errors of the fits. Approximated using the%                       numerical HESSIAN returned by fmincon%       stats_  ... [fitLLR Deviance p]%                   fitLLR is the log likelihood of obtaining the %                       data given the fit (returned by quick_err)%                   Deviance is 2(dataLLR - fitLLR)%                   p is probability from chi^2 pdf with df = #blocks-3%       preds_  ... A vector of the probability of making a correct choice given%                   the fit%       resids_ ... col 1: log diff between model and actual outcomes%                   col 2: log diff between model and actual choices (see below)% Created by jig 9/14/05global Data;if nargin < 1 || isempty(data)    return;endData = data;%% do the fit%       fits(1) ... A      (coh scale)%       fits(2) ... M      (coh exponent)%       fits(3) ... L      (accumulator leak)%       fits(4) ... B      (bias)%       fits(5) ... Bvar   (var of bias)%       fits(6) ... FF     (var/mean)%       fits(7) ... lambda ("lapse")[fits_,f,e,o,l,g,H] = fmincon('ddLeak_err', ...    [  20      1   0.01   0  0  0.3  0.01  ]', [], [], [], [], ...    [   0.001 -5 -10    -50  0  0.05 0.0   ]', ...    [ 100      5  10     50 30  0.95 0.45  ]', [], ...    optimset('LargeScale', 'off', 'Display', 'off', 'Diagnostics', 'off'));% standard errors% The covariance matrix is the negative of the inverse of the % hessian of the natural logarithm of the probability of observing % the data set given the optimal parameters.% For now, use the numerically-estimated HESSIAN returned by fmincon% (which remember is computed from -log likelihood)if nargout > 1        % -H because we used -logL in quick_err    sems_ = sqrt(diag(-((-H)^(-1))));end% statsif nargout > 2        % log likelihood of the fits ("M1" in Watson)    % is just the negative of the error function    M1 = -ddLeak_err(fits_);        % deviance is 2(M0 - M1), where    % M0 is the log likelihood of the data ("saturated model") --    %   which in this case is, of course, ZERO    dev = -2*M1;        % probability is from cdf    p = 1 - chi2cdf(dev, size(data, 1) - length(fits_));        stats_ = [M1 dev p];end